service: serverless-event-api

frameworkVersion: '3'

plugins:
  - serverless-offline

custom:
  serverless-offline:
    useChildProcesses: true
    noTimeout: true
  # Uncomment and configure these values for your domain
  # customDomain:
  #   domainName: api.yourdomain.com
  #   certificateName: '*.yourdomain.com'
  #   basePath: ''
  #   stage: ${self:provider.stage}
  #   createRoute53Record: true

provider:
  name: aws
  runtime: nodejs16.x
  region: us-east-1
  stage: ${opt:stage, 'dev'}
  environment:
    EVENTS_TABLE: events-table-${self:provider.stage}
    REGISTRATIONS_TABLE: registrations-table-${self:provider.stage}
    EMAIL_FROM: events@yourdomain.com
    API_KEY: default-api-key-for-dev
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource:
        - !GetAtt EventsTable.Arn
        - !GetAtt RegistrationsTable.Arn
        - !Join ['', [!GetAtt EventsTable.Arn, '/index/*']]
        - !Join ['', [!GetAtt RegistrationsTable.Arn, '/index/*']]
    - Effect: Allow
      Action:
        - ses:SendEmail
        - ses:SendRawEmail
      Resource: "*"

functions:
  authorizer:
    handler: functions/auth/authorizer.handler
    
  health:
    handler: functions/health.handler
    events:
      - http:
          path: health
          method: get
          cors: true

  createEvent:
    handler: functions/events/create.handler
    events:
      - http:
          path: events
          method: post
          cors: true
          authorizer: aws_iam
  
  getEvents:
    handler: functions/events/list.handler
    events:
      - http:
          path: events
          method: get
          cors: true
  
  getEvent:
    handler: functions/events/get.handler
    events:
      - http:
          path: events/{id}
          method: get
          cors: true
  
  updateEvent:
    handler: functions/events/update.handler
    events:
      - http:
          path: events/{id}
          method: put
          cors: true
          authorizer: aws_iam
  
  deleteEvent:
    handler: functions/events/delete.handler
    events:
      - http:
          path: events/{id}
          method: delete
          cors: true
          authorizer: aws_iam
  
  registerForEvent:
    handler: functions/registrations/create.handler
    events:
      - http:
          path: events/{id}/register
          method: post
          cors: true
  
  listRegistrations:
    handler: functions/registrations/list.handler
    events:
      - http:
          path: events/{id}/registrations
          method: get
          cors: true
          authorizer: aws_iam
  
  processRegistration:
    handler: functions/registrations/process.handler
    events:
      - stream:
          type: dynamodb
          arn: !GetAtt RegistrationsTable.StreamArn

resources:
  Resources:
    EventsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.EVENTS_TABLE}
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: date
            AttributeType: S
          - AttributeName: organizer
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: DateIndex
            KeySchema:
              - AttributeName: date
                KeyType: HASH
            Projection:
              ProjectionType: ALL
          - IndexName: OrganizerIndex
            KeySchema:
              - AttributeName: organizer
                KeyType: HASH
            Projection:
              ProjectionType: ALL
    
    RegistrationsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.REGISTRATIONS_TABLE}
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: eventId
            AttributeType: S
          - AttributeName: email
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: EventIdIndex
            KeySchema:
              - AttributeName: eventId
                KeyType: HASH
            Projection:
              ProjectionType: ALL
          - IndexName: EmailIndex
            KeySchema:
              - AttributeName: email
                KeyType: HASH
            Projection:
              ProjectionType: ALL
        StreamSpecification:
          StreamViewType: NEW_IMAGE